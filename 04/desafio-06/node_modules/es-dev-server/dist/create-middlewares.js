"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createMiddlewares = createMiddlewares;

var _koaStatic = _interopRequireDefault(require("koa-static"));

var _koaEtag = _interopRequireDefault(require("koa-etag"));

var _koaCompress = _interopRequireDefault(require("koa-compress"));

var _basePath = require("./middleware/base-path.js");

var _historyApiFallback = require("./middleware/history-api-fallback.js");

var _compatibilityTransform = require("./middleware/compatibility-transform.js");

var _watchServedFiles = require("./middleware/watch-served-files.js");

var _transformIndexHtml = require("./middleware/transform-index-html.js");

var _messageChannel = require("./middleware/message-channel.js");

var _etagCache = require("./middleware/etag-cache.js");

var _responseBodyCache = require("./middleware/response-body-cache.js");

var _setupBrowserReload = require("./utils/setup-browser-reload.js");

var _constants = require("./constants.js");

var _responseTransform = require("./middleware/response-transform.js");

var _utils = require("./utils/utils.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const defaultCompressOptions = {
  filter(contentType) {
    // event stream doesn't like compression
    return contentType !== 'text/event-stream';
  }

};
/**
 * Creates middlewares based on the given configuration. The middlewares can be
 * used by a koa server using `app.use()`:
 *
 * @param {import('./config').InternalConfig} config the server configuration
 * @param {import('chokidar').FSWatcher} fileWatcher
 * @returns {import('koa').Middleware[]}
 */

function createMiddlewares(config, fileWatcher) {
  const {
    appIndex,
    appIndexDir,
    babelExclude,
    babelModernExclude,
    babelModuleExclude,
    basePath,
    compatibilityMode,
    polyfillsMode,
    compress,
    customBabelConfig,
    customMiddlewares,
    responseTransformers,
    fileExtensions,
    nodeResolve,
    readUserBabelConfig,
    rootDir,
    watch,
    logErrorsToBrowser,
    watchDebounce
  } = config;
  /** @type {import('koa').Middleware[]} */

  const middlewares = [];
  middlewares.push((ctx, next) => {
    (0, _utils.logDebug)(`Receiving request: ${ctx.url}`);
    return next();
  });

  if (compress) {
    const options = typeof compress === 'object' ? compress : defaultCompressOptions;
    middlewares.push((0, _koaCompress.default)(options));
  }

  if (!Object.values(_constants.compatibilityModes).includes(compatibilityMode)) {
    throw new Error(`Unknown compatibility mode: ${compatibilityMode}. Must be one of: ${Object.values(_constants.compatibilityModes)}`);
  }

  const setupBabel = customBabelConfig || compatibilityMode !== _constants.compatibilityModes.NONE || readUserBabelConfig;
  const setupCompatibility = compatibilityMode && compatibilityMode !== _constants.compatibilityModes.NONE;
  const setupTransformIndexHTML = nodeResolve || setupBabel || setupCompatibility;
  const setupHistoryFallback = appIndex;
  const setupMessageChanel = watch || logErrorsToBrowser && (setupBabel || nodeResolve); // strips a base path from requests

  if (config.basePath) {
    middlewares.push((0, _basePath.createBasePathMiddleware)({
      basePath
    }));
  } // adds custom user's middlewares


  if (customMiddlewares && customMiddlewares.length > 0) {
    customMiddlewares.forEach(customMiddleware => {
      middlewares.push(customMiddleware);
    });
  }

  middlewares.push(async (ctx, next) => {
    await next();
    (0, _utils.logDebug)(`Serving request: ${ctx.url} with status: ${ctx.status}`);
  }); // serves 304 responses if resource hasn't changed

  middlewares.push((0, _etagCache.createEtagCacheMiddleware)()); // adds etag headers for caching

  middlewares.push((0, _koaEtag.default)());

  if (fileWatcher) {
    // caches (transformed) file contents for faster response times
    middlewares.push((0, _responseBodyCache.createResponseBodyCacheMiddleware)({
      fileWatcher,
      rootDir,
      fileExtensions
    }));
  } // communicates with browser for reload or logging


  if (setupMessageChanel) {
    middlewares.push((0, _messageChannel.createMessageChannelMiddleware)({
      rootDir,
      appIndex
    }));
  } // watches served files


  middlewares.push((0, _watchServedFiles.createWatchServedFilesMiddleware)({
    rootDir,
    fileWatcher
  })); // compile code using babel and/or resolve module imports

  if (setupBabel || nodeResolve) {
    middlewares.push((0, _compatibilityTransform.createCompatibilityTransformMiddleware)({
      rootDir,
      readUserBabelConfig,
      compatibilityMode,
      fileExtensions,
      customBabelConfig,
      babelExclude,
      babelModernExclude,
      babelModuleExclude,
      nodeResolve
    }));
  } // injects polyfills and shims for compatibility with older browsers


  if (setupTransformIndexHTML) {
    middlewares.push((0, _transformIndexHtml.createTransformIndexHTMLMiddleware)({
      compatibilityMode,
      polyfillsMode,
      appIndex,
      appIndexDir
    }));
  } // serves index.html for non-file requests for SPA routing


  if (setupHistoryFallback) {
    middlewares.push((0, _historyApiFallback.createHistoryAPIFallbackMiddleware)({
      appIndex,
      appIndexDir
    }));
  }

  if (watch) {
    (0, _setupBrowserReload.setupBrowserReload)({
      fileWatcher,
      watchDebounce
    });
  }

  if (responseTransformers) {
    middlewares.push((0, _responseTransform.createResponseTransformMiddleware)({
      responseTransformers
    }));
  } // serve sstatic files


  middlewares.push((0, _koaStatic.default)(rootDir, {
    hidden: true,

    setHeaders(res) {
      res.setHeader('cache-control', 'no-cache');
    }

  }));
  return middlewares;
}